# brainstorm

## jupyterhub:
 - Pluggable authentication
 - Centralized deployment
 - Container friendly
 - Code meets data

## ways to run:
 - via browser
 - install Anaconda

## Key components
 - NB: the term *notebook* is typically used for a file containing code, text, and other elements (saved in a file with the .ipynb extension), while *Notebook* for the application and the web interface.
 - Notebook document
 - Jupyter Notebook App
 - Kernel
  * process running in interactive session
  * python2, python3, Julia, R, ...
    
   > **A notebook is a file, whereas a kernel is a process.**
    	
 - Notebook Dashboard
 	* *Files* tab shows files and notebooks in currenct directory
   	* *Running* tab shows all kernels currently running on your computer
   	* *Clusters* tab lets you launch kernels for parallel computing
 
 - Notebook user interface
 
  ![A new notebook](img/nbui-2.png)
  
 - why "Jupyter"?
  - Julia + Python + R	
  - also, Galileo's publication in a pamphlet in 1610 in Sidereus Nuncius (Starry Messanger) about observations of Jupiter's moons (Io, Europa, Ganymede and Callisto) is formulated as a notebook, with illustrations, text, calculations, titles, datapoints, images, reasoning... One of the first notebooks!
  
  
## History:
 - In 2014, Fernando PÃ©rez announced a spin-off project from IPython called Project Jupyter. IPython will continue to exist as a Python shell and a kernel for Jupyter, while the notebook and other language-agnostic parts of IPython will move under the Jupyter name. Jupyter added support for Julia, R, Haskell and Ruby. [from wikipedia]
 - IPython is a command shell for interactive computing
  - Terminal IPython as the familiar REPL (read-eval-print loop, i.e. and interactive toplevel language shell)
  - The IPython kernel that provides computation and communication with the frontend interfaces, like the notebook
  
## Why use Jupyter?
 - use the Notebook for:
  - complex analysis involving interactive experimentation
  - keeping track of interactive sessions, like a lab notebook
  - writing technical documentation involving code, equations, figures...	
  - sharing with colleagues
 - Example applications:
  - Using the Notebook for data exploration
  - Using extensions and widgets
  - Using nbconvert for code execution and workflow simplification
  - Using nbconvert for publishing
  - Using multiple language kernels

## Resources:
 - https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/
 - https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks
 
## Installing and running:
 - It's possible to try out jupyter without any installations. Simply go to http://try.jupyter.org and give it a try!
 - Probably the easiest ways to install and start using jupyter is through Anaconda (developed by Continuum Analytics)
  - <span style="color:red"> should I spend time on Anaconda? </span>
 - after installing jupyter, run `jupyter notebook` in a terminal
  - if you've installed jupyter via Anaconda, you can also use the Anaconda GUI to start IPython/Jupyter, manage environments, find training material etc. 
 - the jupyter command:
  - `jupyter <subcommand> [options]`
 - jupyter has two keyboard input modes, **Edit mode** is for typing code/text (green cell border), and **Command mode** for notebook-level options (blue left margin and grey cell border)
 